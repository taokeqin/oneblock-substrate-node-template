
//! Autogenerated weights for pallet_poe
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-23, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH
//! RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `web3`, CPU: `Westmere E56xx/L56xx/X56xx (Nehalem-C)`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE:
//! 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_poe
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --json-file=raw.json
// --output
// ./pallets/poe/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_poe.
pub trait WeightInfo {
fn create_claim(d: u32, ) -> Weight;
fn revoke_claim(d: u32, ) -> Weight;
fn transfer_claim(d: u32, ) -> Weight;
}

/// Weights for pallet_poe using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
                impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn create_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `6`
                        // Estimated: `3550`
                        // Minimum execution time: 41_669_000 picoseconds.
                        Weight::from_parts(42_767_320,
                        3550)
                        // Standard Error: 37_606
                        .saturating_add(Weight::from_parts(228_602,
                        0).saturating_mul(d.into()))
                        .saturating_add(T::DbWeight::get().reads(1_u64))
                        .saturating_add(T::DbWeight::get().writes(1_u64))
                        }
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn revoke_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `85 + d * (1 ±0)`
                        // Estimated: `3550`
                        // Minimum execution time: 40_874_000 picoseconds.
                        Weight::from_parts(43_328_685,
                        3550)
                        // Standard Error: 15_216
                        .saturating_add(Weight::from_parts(83_023,
                        0).saturating_mul(d.into()))
                        .saturating_add(T::DbWeight::get().reads(1_u64))
                        .saturating_add(T::DbWeight::get().writes(1_u64))
                        }
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn transfer_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `85 + d * (1 ±0)`
                        // Estimated: `3550`
                        // Minimum execution time: 30_335_000 picoseconds.
                        Weight::from_parts(32_498_919,
                        3550)
                        // Standard Error: 19_280
                        .saturating_add(Weight::from_parts(47_842,
                        0).saturating_mul(d.into()))
                        .saturating_add(T::DbWeight::get().reads(1_u64))
                        .saturating_add(T::DbWeight::get().writes(1_u64))
                        }
                        }

                        // For backwards compatibility and tests
                        impl WeightInfo for () {
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn create_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `6`
                        // Estimated: `3550`
                        // Minimum execution time: 41_669_000 picoseconds.
                        Weight::from_parts(42_767_320,
                        3550)
                        // Standard Error: 37_606
                        .saturating_add(Weight::from_parts(228_602,
                        0).saturating_mul(d.into()))
                        .saturating_add(RocksDbWeight::get().reads(1_u64))
                        .saturating_add(RocksDbWeight::get().writes(1_u64))
                        }
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn revoke_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `85 + d * (1 ±0)`
                        // Estimated: `3550`
                        // Minimum execution time: 40_874_000 picoseconds.
                        Weight::from_parts(43_328_685,
                        3550)
                        // Standard Error: 15_216
                        .saturating_add(Weight::from_parts(83_023,
                        0).saturating_mul(d.into()))
                        .saturating_add(RocksDbWeight::get().reads(1_u64))
                        .saturating_add(RocksDbWeight::get().writes(1_u64))
                        }
                        /// Storage: PoeModule Proofs (r:1 w:1)
                        /// Proof: PoeModule Proofs (max_values: None, max_size: Some(85), added: 2560, mode: MaxEncodedLen)
                        /// The range of component `d` is `[0, 32]`.
                        fn transfer_claim(d: u32, ) -> Weight {
                        // Proof Size summary in bytes:
                        // Measured: `85 + d * (1 ±0)`
                        // Estimated: `3550`
                        // Minimum execution time: 30_335_000 picoseconds.
                        Weight::from_parts(32_498_919,
                        3550)
                        // Standard Error: 19_280
                        .saturating_add(Weight::from_parts(47_842,
                        0).saturating_mul(d.into()))
                        .saturating_add(RocksDbWeight::get().reads(1_u64))
                        .saturating_add(RocksDbWeight::get().writes(1_u64))
                        }
                        }